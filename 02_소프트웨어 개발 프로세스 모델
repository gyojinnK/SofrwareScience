[ 주먹구구식 모델 ]
  주먹 구구식 모델이란
    - 공식 가이드라인이나 프로세스가 없는 개발 방식
    - 즉흥적 소프트웨어 개발 or 코딩과 수정 모델이라고도 함
  
  주먹 구구식 모델의 단점
    - 관리 및 유지보수가 매우 어려움
    - 분업이 효율적이지 못함
    - 수정이 어려움

[ 폭포수 모델 ]
  - 소프트웨어를 순차적으로 개발
  
  폭포수 모델의 개발 절차
    - 계획, 분석, 설계, 구현, 테스트, 유지보수 (하향식)
    - 단계마다 검증
    - 단계의 끝에는 산출물 ( 개발계획서, 요구분석명세서, 설계서, 모듈별 코드 )
  
  폭포수 모델의 장점
    - 관리 용이
    - 문서화 가능
  폭포수 모델의 단점
   - 앞 단계가 완료되어야 다음 단계 수행
   - 사용자가 중간에 가시적인 결과를 볼 수 없어 답답할 수 있음
  
[ V 모델 ]
  - 폭포수 모델의 변형, 테스트 단게를 추가
  - 각 개발 단계를 검증하는 데 초점을 둠, 오류를 줄임
  - 분석, 설계는 왼쪽 , 테스트는 오른쪽에 나타냄
  - 구현은 V의 꼭지점에 위치
                                                              
[ 진화적 프로세스 모델 ]
  - 새로운 요구가 수시로 발생해 이에 민첩하게 대응할 수 있는 방법
  - 초기 요구사항을 기반으로 프로토타입 작성
  - 사용자 만족할 때까지 변경된 요규사항을 반영하여 n차 프로토타입 작성, 만족하면 최종제품으로 개발
  ex) 프로토타입 모델
        - 장점 : 원활한 대화, 유지보수 용이
        - 단점 : 인력&비용 산정 어려움, 개발 과정 관리 어려움, 시간&비용 예측 어려움
[ 나선형 모델 ]
  - 개발 과정이 뱅글뱅글 돌아 점점 완성도 높은 제품이 만들어짐
  - 위험분석 후 프로토타입 개발
  - 절차 :
      계획 및 요구분석 단계 -> 위험 분석 단계 -> 개발 단계 -> 사용자 평가 단계
 
[ 단계적 개발 모델 ]
  - 개발자가 릴리즈1을 개발 -> 사용자가 사용
  - 사용자가 릴리스1을 사용하는 동안 개발자는 다음 버전 릴리스2개발
  - 개발과 사용을 병행하는 과정을 반복하며 완성                                                                                                                                                                                                                                               ㅗㅠ
  - 릴리스 구성 방법
      1. 점증적 개발 방법 : 
      2. 반복적 개발
      
[ 애자일 프로세스 모델 ]  
  스크럼 방식 :
    - 제품 기능 목록 작성 -> 스프린트 계획 수립 -> 스프린트 구현 목록 -> 스프린트 수행 -> 매일 일일 스크림 회의 -> 스프린트 개발 완료 -> 스프린트 검토 회의 -> 스프린트 회고
 
  
  
