[ 아키텍처 설계 ]
복합성의 문제
  - 대형 프로젝트는 전체 시스템의 구조를 생각하면 균형과 조화를 이루도록 설계
아키텍처의 필요성
  - 아키텍처 설계로 소프트웨어가 어떤 구조이고 어떻게 동작할 것인지를 예측할 수 있으며, 변경에 유연하게 대처 가능
아키텍처 특징
  - 소프트웨어를 이루고 있는 여러 구성요소를 다룸
  - 인터페이스를 통해 소프트웨어의 구성요소가 어떻게 상호작용하는지를 정의
아키텍처 설계 시 고려 사항
  - 모든 이해관계자 사이의 의사소통 도구로 활용할 수 있어야 함
  - 특정 문제 영역에 적합한 소프트웨어의 구성 요소를 표준화하고 패턴화 해 재사용할 수 있도록 설계해야 함
  
[ 아키텍처의 품질 속성 ]
시스템 품질 속성
  - 가용성 : 이중화 설계
  - 변경 용이성
  - 성능
  - 보안성
  - 사용성
  - 데스트 용이성
  - 시장 적시성
  - 비용과 이익
  - 예상 시스템 수명
  - 목표 시장
  
[ 아키텍처의 4+1 관점 ]
  - 시나리오 관점
  - 논리적 관점
  - 프로세스 관점
  - 개발 관점
    - 컴포넌트 관점
  - 물리적 관점
  
[ 아키텍처 스타일 ]
  - 클라이언트 - 서버 스타일
  - 서버 특성
  - 클라이언트 특성
  - 계층 스타일
  - MVC 스타일
  
[ 클래스 간의 관계 ]
  연관 관계
    - 양방향 연관 관계
    - 역할이 부여된 연관 관계
  다중 연관 관계
  단방향 연관 관계
  연관 클래스
  일반화 관계
  집합 관계
  합성 관계
  의존 관계
  실체화 관계
 
[ 클래스 설계 원칙 ]
  단일 책임의 원칙 : 클래스를 변경해야 하는 이유는 단 하나여야 한다.
  개방 폐쇄 원칙 : 변경에는 닫혀 있어야 하고, 확장에는 열려 있어야 한다.
  리스코프 교체 원칙 : 상위 클랫그의 객체는 언제나 자신의 하위 클래스의 객체로 교체할 수 있어야한다.
  의존 관계 역전 원칙 : 클라이언트는 구체 클래스가 아닌 추상 클래스에 의존해야 한다.
  인터페이스 분리 원칙 : 클라이언트는 자신이 사용하지 않는 메서드와 의존 관계를 맺으면 안된다.
  
  
  
  
  
  
  
  
  
  
  
  
  
 
