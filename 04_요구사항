[ 모델의 정의와 필요성 ]
  소프트웨어 개발 모델
    - 객체지향 형식
    
  소프트웨어 개발 모델 사용 장점
    1. 이해도 향상
    2. 유지보수 용이
    
  소프트웨어 개발 모델 사용 단점
    1. 과도한 문서 작업으로 일정 지연
    2. 형식적인 산출물로 전락할 가능성 발생


[ 모델링 ]
  자연어를 사용한 표현
    - 요구사항을 자연어로 표현(모델링)하는 것
    - 문자 등
    - 길어지면 해석이 달라질 수 있고 내용 검정 어려움
  
  형식 언어를 사용한 표현
    - 문법과 의미가 수학을 기초로 작성된 간결한 표현(모델링)
    - 표기법을 학습해야하는 단점
      1. 관계형 표기법
      2. 상태 위주 표기법
      
  UML 다이어그램 사용한 표현
    - 가시적으로 확인 가능, 문서화도 가능
    - 분석 및 설계 과정에서 유용, 검증 자료로 활용
    
[ 구조적 방법의 표현 도구 : DFD ]
  자료 흐름도 : Data Flow Diagram)
  
  자료 사전 : Data Dictionary
    - 자료흐름도에 존재하는 데이터에 대한 자세한 설명 기록
    - 몇 가지 기호 사용
    
  소단위 명세서 : Mini-Spec
    - DFD에서 원으로 표시한 프로세스인 처리는 실제 알고리즘 형태로 작성한 것
    - 도구 : 구조적 언어, 선후 조건문, 의사 결정표 등
    
[ 정보공학 방법의 표현 도구 : E-R 다이어그램 ]

[ 객체지향 방법의 표현 도구 : 유스케이스 다이어그램 ]
  작성 단계
    1. 후보 유스케이스 도출 
    2. 후보 유스케이스 검토 / 유스케이스 특성 확인 및 통합
    3. 유스케이스 정렬
  
  유스케이스 명세서 작성
    - 개요 : 기능, 사용자, 액터 표현
    - 관련 액터 : 사용하는 액터
    - 우선순위 : 개발 순서
    - 선행 조건
    - 후행 조건 : 기능 수행 후 만족해야 하는 상태
    - 이벤트 흐름 : 사용자와 시스템 간의 대화 흐름(기본 흐름), 특수한 상황에서 어떻게 흐를지(대안 흐름)
    - 비기능 요구사항 : 성능, 신뢰성, 보안성, 가용성 등 품질 요소 나타냄
    
    
[ 요구분석명세서의 이해 ]
  소프트웨어 요구분석명세서의 정의
    - 요구분석 과정의 최종 산출물
    - 설계, 구현의 참조 사항, 사용자와 개발자의 계약서
    - 요구분석명세서 작성
      - 사용자가 이해할 수 있는 언어 사용
  
  주의사항 
    - 사용자가 쉽게 읽고 이해할 수 있도록 작성
    - 설계, 코딩에 효과적으로 사용 가능하도록 작성
    - 비기능 요구 명확히 작성
    - 테스트 기준으로 사용 가능하도록 작성
    - 품질에 대한 우선순위 명시
    
[ 잘 만든 요구분석명세서의 특성 ]
  - 완정성
  - 일관성
  - 명확성
  - 추적 가능성
  - 변경 용이성
  - 검증 가능성
    
    
    
    
    
    
    
    
    
     
    
    
    
    
    
    
    
    
    
  
